
# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'demo_dbt'
version: '1.0.0'

# This setting configures which "profile" dbt uses for this project.
profile: 'demo_dbt'

# Contoh buat variabel yang bisa diakses di models
vars:
  current_champion: Lakers

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

docs-paths: ["docs"] # buat docs blocks

clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

on-run-start: "insert into dbt_project_dev.staging.dbt_audits (audit_type,created_at) values ('run_start',current_timestamp());"
on-run-end: "insert into dbt_project_dev.staging.dbt_audits (audit_type,created_at) values ('run_end',current_timestamp());"

# In this example config, we tell dbt to build all models in the example/
# directory as views. These settings can be overridden in the individual model
# files using the `{{ config(...) }}` macro.
models:
  pre-hook: "insert into dbt_project_dev.staging.dbt_audits (audit_type,created_at) values ('model_start',current_timestamp());"
  post-hook: "insert into dbt_project_dev.staging.dbt_audits (audit_type,created_at) values ('model_end',current_timestamp());"
  demo_dbt:
    # Config indicated by + and applies to all files under models/example/
    staging:
      +materialized: view
      +schema: staging
      example:
        +materialized: table
